# -*- coding: utf-8 -*-
"""text_generation_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ErMABI4sdo9ovuSqEfQ1Ql4b_evajulp
"""

CLIENT_ID='2t6erKnxuo4r3YLrDU1-bw'
SECRET_KEY='eV9zsR3v64gY8to1KZIsPrbhJ3Dr1w'

import requests

auth=requests.auth.HTTPBasicAuth(CLIENT_ID,SECRET_KEY)

data={
    'grant_type':'password',
    'username':'tihsrah',
    'password':'' 
    # password removed from here 
}

headers={'User-Agent':'tihsrah/0.1'}

res=requests.post(
    'https://www.reddit.com/api/v1/access_token',
    auth=auth,data=data,headers=headers
)

TOKEN=res.json()['access_token']

headers['Authorization']=f'bearer {TOKEN}'

headers

requests.get('https://oauth.reddit.com/api/v1/me',headers=headers)

# !pip install praw

import praw
import webbrowser
import urllib.parse

# create a Reddit instance with the client_id and client_secret
reddit = praw.Reddit(
    client_id=CLIENT_ID,
    client_secret=SECRET_KEY,
    redirect_uri="https://www.linkedin.com/in/harshit-05223a1a9/",
    user_agent="tihsrah/0.1"
)

# get the URL for the authorization page
scopes = ["identity", "read"]
state = "random_string"
url = reddit.auth.url(scopes, state, "permanent")

# print the URL and open it in a web browser
print(f"Go to this URL and authorize the app: {url}")
webbrowser.open(url)

# get the authorization code from the redirected URL
redirected_url = input("Paste the URL you were redirected to: ")
url_params = urllib.parse.parse_qs(urllib.parse.urlparse(redirected_url).query)
auth_code = url_params["code"][0]

# get the refresh token from the authorization code
refresh_token = reddit.auth.authorize(auth_code)
print(f"Refresh token: {refresh_token}")

# !pip install asyncpraw

import praw

# authenticate with Reddit API
reddit = praw.Reddit(
    client_id=CLIENT_ID,
    client_secret=SECRET_KEY,
    redirect_uri="https://www.linkedin.com/in/harshit-05223a1a9/",
    user_agent="tihsrah/0.1",
    refresh_token=refresh_token,
    access_token="816464346192-yDgGheVJBvlNpyu1Wj86xNwdO4iaYA"
    
)

# get a subreddit object
subreddit_name = "funny"
subreddit = reddit.subreddit(subreddit_name)

# get a list of hot posts in the subreddit

# print(hot_posts)

from tqdm import tqdm
hot_posts = subreddit.hot(limit=100000)  # get top 10 hot posts
# iterate over the hot posts and get their comments and most-liked replies
# for post in hot_posts:
#   print("post title :",post.title)
#   print("post comment list : ",post.comments.list())
#   print("post comment 1st element body :",post.comments.list()[0].body)
#   print("post comment 1st element replies :",post.comments.list()[0].replies)
#   for i in post.comments.list()[0].replies:
#     print("rep : ",i.body)
#   break
#   # comment=post.comments.list()
#   # print(comment[0])

comments_list=[]
top_reply_list=[]
for post in tqdm(hot_posts):
    comments = post.comments.list()
    for comment in comments:
      try:
        if not comment.replies:
              continue
        top_reply = max(comment.replies, key=lambda reply: reply.score)
      except:
        continue
      comments_list.append(comment.body)
      top_reply_list.append(top_reply.body)

print(len(comments_list))
print(len(top_reply_list))

comments_list[29]

top_reply_list[29]

import pandas as pd

# create two lists

# create a dictionary with the lists as values
data = {'comment': comments_list, 'reply': top_reply_list}

# create a DataFrame from the dictionary
df = pd.DataFrame(data)

# store the DataFrame in a CSV file
df.to_csv('chad3.csv', index=False)

df.tail()







# import asyncio
# import asyncpraw
# from tqdm import tqdm
# async def my_async_function():
#     reddit = await asyncpraw.Reddit(
#         client_id=CLIENT_ID,
#     client_secret=SECRET_KEY,
#     redirect_uri="https://www.linkedin.com/in/harshit-05223a1a9/",
#     user_agent="tihsrah/0.1",
#     refresh_token=refresh_token,
#     access_token="816464346192-yDgGheVJBvlNpyu1Wj86xNwdO4iaYA"

#     )
#     # get a subreddit object
#     subreddit_name = "meme"
#     subreddit = reddit.subreddit(subreddit_name)

    
#     hot_posts = subreddit.hot(limit=100000)  # get top 10 hot posts
#     # iterate over the hot posts and get their comments and most-liked replies
#     # for post in hot_posts:
#     #   print("post title :",post.title)
#     #   print("post comment list : ",post.comments.list())
#     #   print("post comment 1st element body :",post.comments.list()[0].body)
#     #   print("post comment 1st element replies :",post.comments.list()[0].replies)
#     #   for i in post.comments.list()[0].replies:
#     #     print("rep : ",i.body)
#     #   break
#     #   # comment=post.comments.list()
#     #   # print(comment[0])

#     comments_list=[]
#     top_reply_list=[]
#     for post in tqdm(hot_posts):
#         comments = post.comments.list()
#         for comment in comments:
#           try:
#             if not comment.replies:
#                   continue
#             top_reply = max(comment.replies, key=lambda reply: reply.score)
#           except:
#             continue
#           comments_list.append(comment.body)
#           top_reply_list.append(top_reply.body)

#     import pandas as pd

#     # create two lists

#     # create a dictionary with the lists as values
#     data = {'comment': comments_list, 'reply': top_reply_list}

#     # create a DataFrame from the dictionary
#     df = pd.DataFrame(data)

#     # store the DataFrame in a CSV file
#     df.to_csv('chad3.csv', index=False)
# asyncio.run(my_async_function())





